// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v5.26.1
// source: proto/coding_tests/v1/coding_test.proto

package codingtestspb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VerifyTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *VerifyTestRequest) Reset() {
	*x = VerifyTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTestRequest) ProtoMessage() {}

func (x *VerifyTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTestRequest.ProtoReflect.Descriptor instead.
func (*VerifyTestRequest) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{0}
}

func (x *VerifyTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type VerifyTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *CodingTest `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
}

func (x *VerifyTestResponse) Reset() {
	*x = VerifyTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTestResponse) ProtoMessage() {}

func (x *VerifyTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTestResponse.ProtoReflect.Descriptor instead.
func (*VerifyTestResponse) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{1}
}

func (x *VerifyTestResponse) GetTest() *CodingTest {
	if x != nil {
		return x.Test
	}
	return nil
}

type StartTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId         string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	CandidateName  string `protobuf:"bytes,2,opt,name=candidate_name,json=candidateName,proto3" json:"candidate_name,omitempty"`
	CandidateEmail string `protobuf:"bytes,3,opt,name=candidate_email,json=candidateEmail,proto3" json:"candidate_email,omitempty"`
}

func (x *StartTestRequest) Reset() {
	*x = StartTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTestRequest) ProtoMessage() {}

func (x *StartTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTestRequest.ProtoReflect.Descriptor instead.
func (*StartTestRequest) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{2}
}

func (x *StartTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *StartTestRequest) GetCandidateName() string {
	if x != nil {
		return x.CandidateName
	}
	return ""
}

func (x *StartTestRequest) GetCandidateEmail() string {
	if x != nil {
		return x.CandidateEmail
	}
	return ""
}

type StartTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartTestResponse) Reset() {
	*x = StartTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTestResponse) ProtoMessage() {}

func (x *StartTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTestResponse.ProtoReflect.Descriptor instead.
func (*StartTestResponse) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{3}
}

func (x *StartTestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SubmitTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId           string `protobuf:"bytes,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Code             string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	PassedPercentage int32  `protobuf:"varint,3,opt,name=passed_percentage,json=passedPercentage,proto3" json:"passed_percentage,omitempty"`
}

func (x *SubmitTestRequest) Reset() {
	*x = SubmitTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTestRequest) ProtoMessage() {}

func (x *SubmitTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTestRequest.ProtoReflect.Descriptor instead.
func (*SubmitTestRequest) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{4}
}

func (x *SubmitTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *SubmitTestRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SubmitTestRequest) GetPassedPercentage() int32 {
	if x != nil {
		return x.PassedPercentage
	}
	return 0
}

type SubmitTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SubmitTestResponse) Reset() {
	*x = SubmitTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTestResponse) ProtoMessage() {}

func (x *SubmitTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTestResponse.ProtoReflect.Descriptor instead.
func (*SubmitTestResponse) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{5}
}

func (x *SubmitTestResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GenerateTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId      int32  `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProblemId      int32  `protobuf:"varint,2,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	ExpiresInHours int32  `protobuf:"varint,3,opt,name=expires_in_hours,json=expiresInHours,proto3" json:"expires_in_hours,omitempty"`
	ClientId       string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *GenerateTestRequest) Reset() {
	*x = GenerateTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTestRequest) ProtoMessage() {}

func (x *GenerateTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTestRequest.ProtoReflect.Descriptor instead.
func (*GenerateTestRequest) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{6}
}

func (x *GenerateTestRequest) GetCompanyId() int32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *GenerateTestRequest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *GenerateTestRequest) GetExpiresInHours() int32 {
	if x != nil {
		return x.ExpiresInHours
	}
	return 0
}

func (x *GenerateTestRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type GenerateTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Test *CodingTest `protobuf:"bytes,1,opt,name=test,proto3" json:"test,omitempty"`
	Link string      `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *GenerateTestResponse) Reset() {
	*x = GenerateTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateTestResponse) ProtoMessage() {}

func (x *GenerateTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateTestResponse.ProtoReflect.Descriptor instead.
func (*GenerateTestResponse) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{7}
}

func (x *GenerateTestResponse) GetTest() *CodingTest {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *GenerateTestResponse) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type GetCompanyTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompanyId int32 `protobuf:"varint,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
}

func (x *GetCompanyTestsRequest) Reset() {
	*x = GetCompanyTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyTestsRequest) ProtoMessage() {}

func (x *GetCompanyTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyTestsRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyTestsRequest) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{8}
}

func (x *GetCompanyTestsRequest) GetCompanyId() int32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

type GetCompanyTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests []*CodingTest `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *GetCompanyTestsResponse) Reset() {
	*x = GetCompanyTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyTestsResponse) ProtoMessage() {}

func (x *GetCompanyTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyTestsResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyTestsResponse) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{9}
}

func (x *GetCompanyTestsResponse) GetTests() []*CodingTest {
	if x != nil {
		return x.Tests
	}
	return nil
}

type CodingTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyId           int32                  `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProblemId           int32                  `protobuf:"varint,3,opt,name=problem_id,json=problemId,proto3" json:"problem_id,omitempty"`
	CandidateName       string                 `protobuf:"bytes,4,opt,name=candidate_name,json=candidateName,proto3" json:"candidate_name,omitempty"`
	CandidateEmail      string                 `protobuf:"bytes,5,opt,name=candidate_email,json=candidateEmail,proto3" json:"candidate_email,omitempty"`
	Status              string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	StartedAt           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	CompletedAt         *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	ExpiresAt           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	TestDurationMinutes int32                  `protobuf:"varint,10,opt,name=test_duration_minutes,json=testDurationMinutes,proto3" json:"test_duration_minutes,omitempty"`
	SubmissionCode      string                 `protobuf:"bytes,11,opt,name=submission_code,json=submissionCode,proto3" json:"submission_code,omitempty"`
	PassedPercentage    int32                  `protobuf:"varint,12,opt,name=passed_percentage,json=passedPercentage,proto3" json:"passed_percentage,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *CodingTest) Reset() {
	*x = CodingTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodingTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodingTest) ProtoMessage() {}

func (x *CodingTest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_coding_tests_v1_coding_test_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodingTest.ProtoReflect.Descriptor instead.
func (*CodingTest) Descriptor() ([]byte, []int) {
	return file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP(), []int{10}
}

func (x *CodingTest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CodingTest) GetCompanyId() int32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *CodingTest) GetProblemId() int32 {
	if x != nil {
		return x.ProblemId
	}
	return 0
}

func (x *CodingTest) GetCandidateName() string {
	if x != nil {
		return x.CandidateName
	}
	return ""
}

func (x *CodingTest) GetCandidateEmail() string {
	if x != nil {
		return x.CandidateEmail
	}
	return ""
}

func (x *CodingTest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CodingTest) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *CodingTest) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *CodingTest) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *CodingTest) GetTestDurationMinutes() int32 {
	if x != nil {
		return x.TestDurationMinutes
	}
	return 0
}

func (x *CodingTest) GetSubmissionCode() string {
	if x != nil {
		return x.SubmissionCode
	}
	return ""
}

func (x *CodingTest) GetPassedPercentage() int32 {
	if x != nil {
		return x.PassedPercentage
	}
	return 0
}

func (x *CodingTest) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CodingTest) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_proto_coding_tests_v1_coding_test_proto protoreflect.FileDescriptor

var file_proto_coding_tests_v1_coding_test_proto_rawDesc = []byte{
	0x0a, 0x27, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c, 0x0a, 0x11, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x12, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74,
	0x22, 0x7b, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63,
	0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x2d, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x11,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x65,
	0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x37, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0x4c,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0xf7, 0x04, 0x0a,
	0x0a, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6e,
	0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x64, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x65, 0x73, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xd8, 0x03, 0x0a, 0x11, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0a,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x65, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x27,
	0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x2d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_coding_tests_v1_coding_test_proto_rawDescOnce sync.Once
	file_proto_coding_tests_v1_coding_test_proto_rawDescData = file_proto_coding_tests_v1_coding_test_proto_rawDesc
)

func file_proto_coding_tests_v1_coding_test_proto_rawDescGZIP() []byte {
	file_proto_coding_tests_v1_coding_test_proto_rawDescOnce.Do(func() {
		file_proto_coding_tests_v1_coding_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_coding_tests_v1_coding_test_proto_rawDescData)
	})
	return file_proto_coding_tests_v1_coding_test_proto_rawDescData
}

var file_proto_coding_tests_v1_coding_test_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_coding_tests_v1_coding_test_proto_goTypes = []interface{}{
	(*VerifyTestRequest)(nil),       // 0: coding_tests.v1.VerifyTestRequest
	(*VerifyTestResponse)(nil),      // 1: coding_tests.v1.VerifyTestResponse
	(*StartTestRequest)(nil),        // 2: coding_tests.v1.StartTestRequest
	(*StartTestResponse)(nil),       // 3: coding_tests.v1.StartTestResponse
	(*SubmitTestRequest)(nil),       // 4: coding_tests.v1.SubmitTestRequest
	(*SubmitTestResponse)(nil),      // 5: coding_tests.v1.SubmitTestResponse
	(*GenerateTestRequest)(nil),     // 6: coding_tests.v1.GenerateTestRequest
	(*GenerateTestResponse)(nil),    // 7: coding_tests.v1.GenerateTestResponse
	(*GetCompanyTestsRequest)(nil),  // 8: coding_tests.v1.GetCompanyTestsRequest
	(*GetCompanyTestsResponse)(nil), // 9: coding_tests.v1.GetCompanyTestsResponse
	(*CodingTest)(nil),              // 10: coding_tests.v1.CodingTest
	(*timestamppb.Timestamp)(nil),   // 11: google.protobuf.Timestamp
}
var file_proto_coding_tests_v1_coding_test_proto_depIdxs = []int32{
	10, // 0: coding_tests.v1.VerifyTestResponse.test:type_name -> coding_tests.v1.CodingTest
	10, // 1: coding_tests.v1.GenerateTestResponse.test:type_name -> coding_tests.v1.CodingTest
	10, // 2: coding_tests.v1.GetCompanyTestsResponse.tests:type_name -> coding_tests.v1.CodingTest
	11, // 3: coding_tests.v1.CodingTest.started_at:type_name -> google.protobuf.Timestamp
	11, // 4: coding_tests.v1.CodingTest.completed_at:type_name -> google.protobuf.Timestamp
	11, // 5: coding_tests.v1.CodingTest.expires_at:type_name -> google.protobuf.Timestamp
	11, // 6: coding_tests.v1.CodingTest.created_at:type_name -> google.protobuf.Timestamp
	11, // 7: coding_tests.v1.CodingTest.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 8: coding_tests.v1.CodingTestService.VerifyTest:input_type -> coding_tests.v1.VerifyTestRequest
	2,  // 9: coding_tests.v1.CodingTestService.StartTest:input_type -> coding_tests.v1.StartTestRequest
	4,  // 10: coding_tests.v1.CodingTestService.SubmitTest:input_type -> coding_tests.v1.SubmitTestRequest
	6,  // 11: coding_tests.v1.CodingTestService.GenerateTest:input_type -> coding_tests.v1.GenerateTestRequest
	8,  // 12: coding_tests.v1.CodingTestService.GetCompanyTests:input_type -> coding_tests.v1.GetCompanyTestsRequest
	1,  // 13: coding_tests.v1.CodingTestService.VerifyTest:output_type -> coding_tests.v1.VerifyTestResponse
	3,  // 14: coding_tests.v1.CodingTestService.StartTest:output_type -> coding_tests.v1.StartTestResponse
	5,  // 15: coding_tests.v1.CodingTestService.SubmitTest:output_type -> coding_tests.v1.SubmitTestResponse
	7,  // 16: coding_tests.v1.CodingTestService.GenerateTest:output_type -> coding_tests.v1.GenerateTestResponse
	9,  // 17: coding_tests.v1.CodingTestService.GetCompanyTests:output_type -> coding_tests.v1.GetCompanyTestsResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_coding_tests_v1_coding_test_proto_init() }
func file_proto_coding_tests_v1_coding_test_proto_init() {
	if File_proto_coding_tests_v1_coding_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_coding_tests_v1_coding_test_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodingTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_coding_tests_v1_coding_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_coding_tests_v1_coding_test_proto_goTypes,
		DependencyIndexes: file_proto_coding_tests_v1_coding_test_proto_depIdxs,
		MessageInfos:      file_proto_coding_tests_v1_coding_test_proto_msgTypes,
	}.Build()
	File_proto_coding_tests_v1_coding_test_proto = out.File
	file_proto_coding_tests_v1_coding_test_proto_rawDesc = nil
	file_proto_coding_tests_v1_coding_test_proto_goTypes = nil
	file_proto_coding_tests_v1_coding_test_proto_depIdxs = nil
}
