// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/coding_tests/v1/coding_test.proto

package codingtestspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CodingTestServiceClient is the client API for CodingTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodingTestServiceClient interface {
	VerifyTest(ctx context.Context, in *VerifyTestRequest, opts ...grpc.CallOption) (*VerifyTestResponse, error)
	StartTest(ctx context.Context, in *StartTestRequest, opts ...grpc.CallOption) (*StartTestResponse, error)
	SubmitTest(ctx context.Context, in *SubmitTestRequest, opts ...grpc.CallOption) (*SubmitTestResponse, error)
	GenerateTest(ctx context.Context, in *GenerateTestRequest, opts ...grpc.CallOption) (*GenerateTestResponse, error)
	GetCompanyTests(ctx context.Context, in *GetCompanyTestsRequest, opts ...grpc.CallOption) (*GetCompanyTestsResponse, error)
}

type codingTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodingTestServiceClient(cc grpc.ClientConnInterface) CodingTestServiceClient {
	return &codingTestServiceClient{cc}
}

func (c *codingTestServiceClient) VerifyTest(ctx context.Context, in *VerifyTestRequest, opts ...grpc.CallOption) (*VerifyTestResponse, error) {
	out := new(VerifyTestResponse)
	err := c.cc.Invoke(ctx, "/coding_tests.v1.CodingTestService/VerifyTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codingTestServiceClient) StartTest(ctx context.Context, in *StartTestRequest, opts ...grpc.CallOption) (*StartTestResponse, error) {
	out := new(StartTestResponse)
	err := c.cc.Invoke(ctx, "/coding_tests.v1.CodingTestService/StartTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codingTestServiceClient) SubmitTest(ctx context.Context, in *SubmitTestRequest, opts ...grpc.CallOption) (*SubmitTestResponse, error) {
	out := new(SubmitTestResponse)
	err := c.cc.Invoke(ctx, "/coding_tests.v1.CodingTestService/SubmitTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codingTestServiceClient) GenerateTest(ctx context.Context, in *GenerateTestRequest, opts ...grpc.CallOption) (*GenerateTestResponse, error) {
	out := new(GenerateTestResponse)
	err := c.cc.Invoke(ctx, "/coding_tests.v1.CodingTestService/GenerateTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codingTestServiceClient) GetCompanyTests(ctx context.Context, in *GetCompanyTestsRequest, opts ...grpc.CallOption) (*GetCompanyTestsResponse, error) {
	out := new(GetCompanyTestsResponse)
	err := c.cc.Invoke(ctx, "/coding_tests.v1.CodingTestService/GetCompanyTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodingTestServiceServer is the server API for CodingTestService service.
// All implementations must embed UnimplementedCodingTestServiceServer
// for forward compatibility
type CodingTestServiceServer interface {
	VerifyTest(context.Context, *VerifyTestRequest) (*VerifyTestResponse, error)
	StartTest(context.Context, *StartTestRequest) (*StartTestResponse, error)
	SubmitTest(context.Context, *SubmitTestRequest) (*SubmitTestResponse, error)
	GenerateTest(context.Context, *GenerateTestRequest) (*GenerateTestResponse, error)
	GetCompanyTests(context.Context, *GetCompanyTestsRequest) (*GetCompanyTestsResponse, error)
	mustEmbedUnimplementedCodingTestServiceServer()
}

// UnimplementedCodingTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCodingTestServiceServer struct {
}

func (UnimplementedCodingTestServiceServer) VerifyTest(context.Context, *VerifyTestRequest) (*VerifyTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTest not implemented")
}
func (UnimplementedCodingTestServiceServer) StartTest(context.Context, *StartTestRequest) (*StartTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTest not implemented")
}
func (UnimplementedCodingTestServiceServer) SubmitTest(context.Context, *SubmitTestRequest) (*SubmitTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTest not implemented")
}
func (UnimplementedCodingTestServiceServer) GenerateTest(context.Context, *GenerateTestRequest) (*GenerateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTest not implemented")
}
func (UnimplementedCodingTestServiceServer) GetCompanyTests(context.Context, *GetCompanyTestsRequest) (*GetCompanyTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyTests not implemented")
}
func (UnimplementedCodingTestServiceServer) mustEmbedUnimplementedCodingTestServiceServer() {}

// UnsafeCodingTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodingTestServiceServer will
// result in compilation errors.
type UnsafeCodingTestServiceServer interface {
	mustEmbedUnimplementedCodingTestServiceServer()
}

func RegisterCodingTestServiceServer(s grpc.ServiceRegistrar, srv CodingTestServiceServer) {
	s.RegisterService(&CodingTestService_ServiceDesc, srv)
}

func _CodingTestService_VerifyTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodingTestServiceServer).VerifyTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coding_tests.v1.CodingTestService/VerifyTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodingTestServiceServer).VerifyTest(ctx, req.(*VerifyTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodingTestService_StartTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodingTestServiceServer).StartTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coding_tests.v1.CodingTestService/StartTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodingTestServiceServer).StartTest(ctx, req.(*StartTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodingTestService_SubmitTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodingTestServiceServer).SubmitTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coding_tests.v1.CodingTestService/SubmitTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodingTestServiceServer).SubmitTest(ctx, req.(*SubmitTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodingTestService_GenerateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodingTestServiceServer).GenerateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coding_tests.v1.CodingTestService/GenerateTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodingTestServiceServer).GenerateTest(ctx, req.(*GenerateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodingTestService_GetCompanyTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodingTestServiceServer).GetCompanyTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coding_tests.v1.CodingTestService/GetCompanyTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodingTestServiceServer).GetCompanyTests(ctx, req.(*GetCompanyTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CodingTestService_ServiceDesc is the grpc.ServiceDesc for CodingTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodingTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coding_tests.v1.CodingTestService",
	HandlerType: (*CodingTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyTest",
			Handler:    _CodingTestService_VerifyTest_Handler,
		},
		{
			MethodName: "StartTest",
			Handler:    _CodingTestService_StartTest_Handler,
		},
		{
			MethodName: "SubmitTest",
			Handler:    _CodingTestService_SubmitTest_Handler,
		},
		{
			MethodName: "GenerateTest",
			Handler:    _CodingTestService_GenerateTest_Handler,
		},
		{
			MethodName: "GetCompanyTests",
			Handler:    _CodingTestService_GetCompanyTests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/coding_tests/v1/coding_test.proto",
}
